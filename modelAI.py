# -*- coding: utf-8 -*-
"""modelAI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AapYe85k2OIkcKayn5PIx1VnX-r8qAg3
"""

import pandas as pd
from google.colab import data_table

data_table.enable_dataframe_formatter()

import seaborn as sns

dataset = pd.read_csv("provadataset.csv")

dataset

dataset.rename(columns={"Quali colori ti piacciono di più quando scegli un outfit?": "Colori"}, inplace=True)
dataset.rename(columns={"Preferisci outfit adatti a una stagione specifica? Se sì, quale?" : "Stagione"}, inplace=True)
dataset.rename(columns={"Quali sono i tipi di abbigliamento che preferisci?": "Tipo abbigliamento"}, inplace=True)
dataset.rename(columns={"Quanto è importante per te che un outfit sia comodo rispetto a essere alla moda?": "Comfort o stile?"}, inplace=True)
dataset.rename(columns={"Sei un maschio o una femmina?": "Sesso"}, inplace=True)
dataset.rename(columns={"Per quale occasione?": "Occasione"}, inplace=True)
dataset.rename(columns={"Quali di questi outfit corrisponde al tuo?": "Outfit"}, inplace=True)

dataset

dataset[['Colore1', 'Colore2']] = dataset['Colori'].str.split(',', expand=True)
dataset

"""dataset.drop(columns=['Colori'], inplace=True, axis=1)
dataset
"""

dataset.info()

dataset.describe()

dataset.describe(include=['O'])

dataset.drop(columns=['Informazioni cronologiche'], inplace=True, axis=1)
dataset

print(dataset.head())

counts = dataset['Stagione'].value_counts()
print(counts)

import matplotlib.pyplot as plt

# Plot di un istogramma per la distribuzione di una caratteristica
plt.hist(dataset['Tipo abbigliamento'], bins=10)
plt.xlabel('Tipo abbigliamento')
plt.ylabel('Frequenza')
plt.title('Distribuzione di Tipo abbigliamento')
plt.show()

import seaborn as sns

# Plot di un istogramma per la distribuzione di una caratteristica
sns.histplot(data=dataset, x='Occasione', bins=10)
plt.xlabel('Occasione')
plt.ylabel('Frequenza')
plt.title('Distribuzione di Occasione')
plt.show()

dataset

counts = dataset['Occasione'].value_counts()
print(counts)

counts1 = dataset['Tipo abbigliamento'].value_counts()
print(counts1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

def correggi_occasione(row):
  if(row['Occasione'])=='Cerimonia':
    return 'Occasione formale'
  elif(row['Occasione'])=='Università/Scuola':
    return 'Scuola'
  elif(row['Occasione']=='Palestra'):
    return 'Svago'
  else:
    return row['Occasione']


dataset['Occasione']=dataset.apply(correggi_occasione, axis=1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

def correggi_errore1(row):
  if(row['Outfit'])=='maglia e  pantalone':
    return 'maglia e pantalone'
  elif(row['Outfit'])=='maglia e  pantalone corto':
    return 'maglia e pantalone corto'
  elif(row['Outfit']=='vestito, maglia e gonna'):
    return 'vestito'
  elif(row['Outfit']=='felpa e pantalone corto'):
    return 'maglia e pantalone corto'
  else:
    return row['Outfit']


dataset['Outfit']=dataset.apply(correggi_errore1, axis=1)

def correggi_abbigliamento(row):
  if(row['Tipo abbigliamento'])=='Minimalista':
    return 'Elegante'
  elif(row['Tipo abbigliamento'])=='Formale':
    return 'Elegante'
  else:
    return row['Tipo abbigliamento']


dataset['Tipo abbigliamento']=dataset.apply(correggi_abbigliamento, axis=1)

counts2 = dataset['Tipo abbigliamento'].value_counts()
print(counts2)

counts2 = dataset['Occasione'].value_counts()
print(counts2)

dataset

dataset.drop(columns=['Colori'], inplace=True, axis=1)
dataset

counts2 = dataset['Outfit'].value_counts()
print(counts2)

categories = set()
for outfit in dataset['Outfit']:
    categories.update(outfit.split(' e '))  # Dividi l'outfit sulla base di ' e ' e aggiungi le categorie

print("Categorie di outfit uniche:")
for category in categories:
    print(category)

dataset

counts2 = dataset['Outfit'].value_counts()
print(counts2)

def annulla_val_nullo(row):
  if(row['Outfit'])=='vestito':
    return 'maglia e gonna'
  else:
    return row['Outfit']


dataset['Outfit']=dataset.apply(annulla_val_nullo, axis=1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

dataset['Top_outfit'] = dataset['Outfit'].apply(lambda x: x.split(' e ')[0])
dataset['Bottom_outfit'] = dataset['Outfit'].apply(lambda x: x.split(' e ')[1] if 'e' in x else '')

dataset

dataset.drop(columns=['Outfit'], inplace=True, axis=1)
dataset

from sklearn.preprocessing import OneHotEncoder

# Separiamo le variabili indipendenti da quella che vogliamo predire
X_variables = dataset[['Stagione', 'Occasione', 'Tipo abbigliamento', 'Sesso', 'Colore1', 'Colore2', 'Top_outfit', 'Bottom_outfit']]
y_variable = dataset['Comfort o stile?']

# Diamo le variabili indipendenti al OneHotEncoder
encoder = OneHotEncoder()
X_train_encoded = encoder.fit_transform(X_variables)
X_test_encoded = encoder.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


encoder = OneHotEncoder()
X_train_encoded = encoder.fit_transform(X_train)
X_test_encoded = encoder.transform(X_test)


model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_encoded, y_train)

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score

# Predizione sui dati di test
y_pred = model.predict(X_test_encoded)

# Valutazione delle prestazioni del modello
accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label='Stile')

print(f"Accuracy del modello sul test set: {accuracy:.2f}")
print(f"Precison del modello sul test set: {precision:.2f}")

from joblib import dump

# Salva il modello addestrato
dump(model, 'random_forest_model1.joblib')

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.preprocessing import OneHotEncoder

# Dividi il dataset in variabili indipendenti (X) e variabile target (y)
X = dataset[['Stagione', 'Occasione', 'Tipo abbigliamento', 'Sesso', 'Colore1', 'Colore2', 'Top_outfit', 'Bottom_outfit']]
y = dataset['Comfort o stile?']

# Codifica delle variabili categoriche, se necessario

encoder = OneHotEncoder()
X_train_encoded = encoder.fit_transform(X_train)
X_test_encoded = encoder.transform(X_test)

# Suddivisione dei dati in set di addestramento e test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Creazione e addestramento del modello
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_encoded, y_train)

# Predizione sui dati di test
y_pred = model.predict(X_test_encoded)

# Valutazione delle prestazioni del modello
accuracy = accuracy_score(y_test, y_pred)

precision = precision_score(y_test, y_pred, pos_label='Stile')

print(f"Accuracy del modello sul test set: {accuracy:.2f}")
print(f"Precison del modello sul test set: {precision:.2f}")

