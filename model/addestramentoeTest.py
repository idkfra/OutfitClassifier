# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gb7lTO11UeATOVC8mSWqY5XXaBjQ7bfN
"""

import pandas as pd
dataset = pd.read_csv("datasetCorretto.csv")

dataset

from sklearn.preprocessing import OneHotEncoder

# Separiamo le variabili indipendenti da quella che vogliamo predire
X = dataset[['Stagione', 'Occasione', 'Tipo abbigliamento', 'Sesso', 'Colore1', 'Colore2', 'Top_outfit', 'Bottom_outfit']]
y = dataset['Comfort o stile?']

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


encoder = OneHotEncoder()
X_train_encoded = encoder.fit_transform(X_train)
X_test_encoded = encoder.transform(X_test)


model = RandomForestClassifier(n_estimators=40, random_state=32)
model.fit(X_train_encoded, y_train)

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score

from sklearn.metrics import recall_score

# Predizione sui dati di test
y_pred = model.predict(X_test_encoded)

# Valutazione delle prestazioni del modello
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='Stile')
recall = recall_score(y_test, y_pred, pos_label='Stile')
print(f"Accuracy del modello sul test set: {accuracy:.2f}")
print(f"Precison del modello sul test set: {precision:.2f}")
print(f"Recall del modello sul test set: {recall:.2f}")

from joblib import dump

# Salva il modello addestrato
dump(model, 'random_forest_modello_finale.joblib')

import pandas as pd
test_data = pd.read_csv('testColab.csv')

test_data['Colore2'].unique()

dataset['Colore2'].unique()

import joblib

# Carica il modello Random Forest precedentemente addestrato
modell = joblib.load('random_forest_modello_finale.joblib')

test_data = test_data.drop(columns=['Comfort o stile?'])
test_data

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

# Separiamo le variabili indipendenti da quella che vogliamo predire
X = test_data[['Stagione', 'Occasione', 'Tipo abbigliamento', 'Sesso', 'Colore1',
       'Colore2', 'Top_outfit', 'Bottom_outfit']]

encoder = OneHotEncoder()
X_encoded = encoder.fit_transform(X)

predizione = modell.predict(X_encoded)

print("Predizioni del modello:")
print(predizione)