# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AapYe85k2OIkcKayn5PIx1VnX-r8qAg3
"""

import pandas as pd
from google.colab import data_table

data_table.enable_dataframe_formatter()

import seaborn as sns

dataset = pd.read_csv("provadataset.csv")

dataset

dataset.rename(columns={"Quali colori ti piacciono di più quando scegli un outfit?": "Colori"}, inplace=True)
dataset.rename(columns={"Preferisci outfit adatti a una stagione specifica? Se sì, quale?" : "Stagione"}, inplace=True)
dataset.rename(columns={"Quali sono i tipi di abbigliamento che preferisci?": "Tipo abbigliamento"}, inplace=True)
dataset.rename(columns={"Quanto è importante per te che un outfit sia comodo rispetto a essere alla moda?": "Comfort o stile?"}, inplace=True)
dataset.rename(columns={"Sei un maschio o una femmina?": "Sesso"}, inplace=True)
dataset.rename(columns={"Per quale occasione?": "Occasione"}, inplace=True)
dataset.rename(columns={"Quali di questi outfit corrisponde al tuo?": "Outfit"}, inplace=True)

dataset

dataset[['Colore1', 'Colore2']] = dataset['Colori'].str.split(',', expand=True)
dataset

"""dataset.drop(columns=['Colori'], inplace=True, axis=1)
dataset
"""

dataset.info()

dataset.describe()

dataset.describe(include=['O'])

dataset.drop(columns=['Informazioni cronologiche'], inplace=True, axis=1)
dataset

print(dataset.head())

counts = dataset['Stagione'].value_counts()
print(counts)

import matplotlib.pyplot as plt

# Plot di un istogramma per la distribuzione di una caratteristica
plt.hist(dataset['Tipo abbigliamento'], bins=10)
plt.xlabel('Tipo abbigliamento')
plt.ylabel('Frequenza')
plt.title('Distribuzione di Tipo abbigliamento')
plt.show()

import seaborn as sns

# Plot di un istogramma per la distribuzione di una caratteristica
sns.histplot(data=dataset, x='Occasione', bins=10)
plt.xlabel('Occasione')
plt.ylabel('Frequenza')
plt.title('Distribuzione di Occasione')
plt.show()

import seaborn as sns

# Plot di un istogramma per la distribuzione di una caratteristica
sns.histplot(data=dataset, x='Comfort o stile?', bins=10)
plt.xlabel('Comfort o stile')
plt.ylabel('Frequenza')
plt.title('Distribuzione di Comfort o stile')
plt.show()

dataset

counts = dataset['Occasione'].value_counts()
print(counts)

counts1 = dataset['Tipo abbigliamento'].value_counts()
print(counts1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

def correggi_occasione(row):
  if(row['Occasione'])=='Cerimonia':
    return 'Occasione formale'
  elif(row['Occasione'])=='Università/Scuola':
    return 'Scuola'
  elif(row['Occasione']=='Palestra'):
    return 'Svago'
  else:
    return row['Occasione']


dataset['Occasione']=dataset.apply(correggi_occasione, axis=1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

def correggi_errore1(row):
  if(row['Outfit'])=='maglia e  pantalone':
    return 'maglia e pantalone'
  elif(row['Outfit'])=='maglia e  pantalone corto':
    return 'maglia e pantalone corto'
  elif(row['Outfit']=='vestito, maglia e gonna'):
    return 'vestito'
  elif(row['Outfit']=='felpa e pantalone corto'):
    return 'maglia e pantalone corto'
  else:
    return row['Outfit']


dataset['Outfit']=dataset.apply(correggi_errore1, axis=1)

def correggi_abbigliamento(row):
  if(row['Tipo abbigliamento'])=='Minimalista':
    return 'Elegante'
  elif(row['Tipo abbigliamento'])=='Formale':
    return 'Elegante'
  else:
    return row['Tipo abbigliamento']


dataset['Tipo abbigliamento']=dataset.apply(correggi_abbigliamento, axis=1)

counts2 = dataset['Tipo abbigliamento'].value_counts()
print(counts2)

counts2 = dataset['Occasione'].value_counts()
print(counts2)

dataset

dataset.drop(columns=['Colori'], inplace=True, axis=1)
dataset

counts2 = dataset['Outfit'].value_counts()
print(counts2)

categories = set()
for outfit in dataset['Outfit']:
    categories.update(outfit.split(' e '))  # Dividi l'outfit sulla base di ' e ' e aggiungi le categorie

print("Categorie di outfit uniche:")
for category in categories:
    print(category)

dataset

counts2 = dataset['Outfit'].value_counts()
print(counts2)

counts3 = dataset['Comfort o stile?'].value_counts()
print(counts3)

def annulla_val_nullo(row):
  if(row['Outfit'])=='vestito':
    return 'maglia e gonna'
  else:
    return row['Outfit']


dataset['Outfit']=dataset.apply(annulla_val_nullo, axis=1)

counts2 = dataset['Outfit'].value_counts()
print(counts2)

dataset['Top_outfit'] = dataset['Outfit'].apply(lambda x: x.split(' e ')[0])
dataset['Bottom_outfit'] = dataset['Outfit'].apply(lambda x: x.split(' e ')[1] if 'e' in x else '')

dataset

dataset.drop(columns=['Outfit'], inplace=True, axis=1)
dataset

dataset.to_csv('provadataset1.csv', index=False)

import joblib

# Carica il modello Random Forest precedentemente addestrato
model = joblib.load('random_forestmodel.joblib')

test_data = pd.read_csv('testDataset.csv')

def make_predictions(model, new_data_encoded):
    """
    Effettua predizioni su nuovi dati utilizzando un modello addestrato.

    Argomenti:
    - model: Modello addestrato su cui effettuare le predizioni.
    - new_data_encoded: Nuovi dati codificati nello stesso formato utilizzato per l'addestramento del modello.

    Restituisce:
    - predictions: Array delle predizioni del modello per i nuovi dati.
    """
    try:
        # Effettua le predizioni sulle nuove dati
        predictions = model.predict(new_data_encoded)
        return predictions
    except Exception as e:
        print(f"Si è verificato un errore durante le predizioni: {e}")
        return None

new_data = {
    'Stagione': ['Primavera', 'Inverno', 'Estate', 'Autunno'],
    'Occasione': ['Svago', 'Occasione Formale', 'Lavoro', 'Svago'],
    'Tipo abbigliamento': ['Casual', 'Elegante', 'Elegante', 'Streetwear'],
    'Sesso': ['Femmina', 'Maschio', 'Femmina', 'Maschio'],
    'Colore1': ['Bianco', 'Grigio', 'Grigio', 'Blu'],
    'Colore2': ['Rosa', 'Nero', 'Verde', 'Beige'],
    'Top_outfit': ['camicia', 'giacca', 'giacca', 'felpa'],
    'Bottom_outfit': ['gonna', 'pantalone', 'pantalone', 'pantalone']
}
# Creazione di un DataFrame Pandas dai nuovi dati
new_data_df = pd.DataFrame(new_data)

# Codifica delle variabili categoriche
new_data_encoded = encoder.transform(new_data_df)

# Effettua le predizioni sui nuovi dati utilizzando il modello addestrato
new_predictions = make_predictions(model, new_data_encoded)

test_data.columns

# Per ogni colonna nel dataframe
for column in encoded_dataset.columns:
    # Stampa il nome della colonna
    print(f"Colonna: {column}")
    # Stampa i valori unici nella colonna
    print(encoded_dataset[column].unique())
    print()

# Per ogni colonna nel dataframe
for column in dataset.columns:
    # Stampa il nome della colonna
    print(f"Colonna: {column}")
    # Stampa i valori unici nella colonna
    print(dataset[column].unique())
    print()

import numpy as np

# Stampare le etichette uniche nel set di dati di test
unique_labels_test = np.unique(y_test)
print("Etichette uniche nel set di dati di test:", unique_labels_test)

# Stampare le etichette uniche nel set di predizioni
unique_labels_pred = np.unique(y_pred)
print("Etichette uniche nel set di predizioni:", unique_labels_pred)